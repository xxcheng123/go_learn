// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ent-demo/ent/car"
	"ent-demo/ent/predicate"
	"ent-demo/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarUpdate is the builder for updating Car entities.
type CarUpdate struct {
	config
	hooks    []Hook
	mutation *CarMutation
}

// Where appends a list predicates to the CarUpdate builder.
func (cu *CarUpdate) Where(ps ...predicate.Car) *CarUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CarUpdate) SetName(s string) *CarUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CarUpdate) SetNillableName(s *string) *CarUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetPrice sets the "price" field.
func (cu *CarUpdate) SetPrice(f float32) *CarUpdate {
	cu.mutation.ResetPrice()
	cu.mutation.SetPrice(f)
	return cu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (cu *CarUpdate) SetNillablePrice(f *float32) *CarUpdate {
	if f != nil {
		cu.SetPrice(*f)
	}
	return cu
}

// AddPrice adds f to the "price" field.
func (cu *CarUpdate) AddPrice(f float32) *CarUpdate {
	cu.mutation.AddPrice(f)
	return cu
}

// SetCreateAt sets the "create_at" field.
func (cu *CarUpdate) SetCreateAt(t time.Time) *CarUpdate {
	cu.mutation.SetCreateAt(t)
	return cu
}

// SetHostID sets the "host" edge to the User entity by ID.
func (cu *CarUpdate) SetHostID(id int64) *CarUpdate {
	cu.mutation.SetHostID(id)
	return cu
}

// SetNillableHostID sets the "host" edge to the User entity by ID if the given value is not nil.
func (cu *CarUpdate) SetNillableHostID(id *int64) *CarUpdate {
	if id != nil {
		cu = cu.SetHostID(*id)
	}
	return cu
}

// SetHost sets the "host" edge to the User entity.
func (cu *CarUpdate) SetHost(u *User) *CarUpdate {
	return cu.SetHostID(u.ID)
}

// Mutation returns the CarMutation object of the builder.
func (cu *CarUpdate) Mutation() *CarMutation {
	return cu.mutation
}

// ClearHost clears the "host" edge to the User entity.
func (cu *CarUpdate) ClearHost() *CarUpdate {
	cu.mutation.ClearHost()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CarUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CarUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CarUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CarUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CarUpdate) defaults() {
	if _, ok := cu.mutation.CreateAt(); !ok {
		v := car.UpdateDefaultCreateAt()
		cu.mutation.SetCreateAt(v)
	}
}

func (cu *CarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(car.Table, car.Columns, sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(car.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Price(); ok {
		_spec.SetField(car.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := cu.mutation.AddedPrice(); ok {
		_spec.AddField(car.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := cu.mutation.CreateAt(); ok {
		_spec.SetField(car.FieldCreateAt, field.TypeTime, value)
	}
	if cu.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.HostTable,
			Columns: []string{car.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.HostTable,
			Columns: []string{car.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{car.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CarUpdateOne is the builder for updating a single Car entity.
type CarUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarMutation
}

// SetName sets the "name" field.
func (cuo *CarUpdateOne) SetName(s string) *CarUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableName(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetPrice sets the "price" field.
func (cuo *CarUpdateOne) SetPrice(f float32) *CarUpdateOne {
	cuo.mutation.ResetPrice()
	cuo.mutation.SetPrice(f)
	return cuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillablePrice(f *float32) *CarUpdateOne {
	if f != nil {
		cuo.SetPrice(*f)
	}
	return cuo
}

// AddPrice adds f to the "price" field.
func (cuo *CarUpdateOne) AddPrice(f float32) *CarUpdateOne {
	cuo.mutation.AddPrice(f)
	return cuo
}

// SetCreateAt sets the "create_at" field.
func (cuo *CarUpdateOne) SetCreateAt(t time.Time) *CarUpdateOne {
	cuo.mutation.SetCreateAt(t)
	return cuo
}

// SetHostID sets the "host" edge to the User entity by ID.
func (cuo *CarUpdateOne) SetHostID(id int64) *CarUpdateOne {
	cuo.mutation.SetHostID(id)
	return cuo
}

// SetNillableHostID sets the "host" edge to the User entity by ID if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableHostID(id *int64) *CarUpdateOne {
	if id != nil {
		cuo = cuo.SetHostID(*id)
	}
	return cuo
}

// SetHost sets the "host" edge to the User entity.
func (cuo *CarUpdateOne) SetHost(u *User) *CarUpdateOne {
	return cuo.SetHostID(u.ID)
}

// Mutation returns the CarMutation object of the builder.
func (cuo *CarUpdateOne) Mutation() *CarMutation {
	return cuo.mutation
}

// ClearHost clears the "host" edge to the User entity.
func (cuo *CarUpdateOne) ClearHost() *CarUpdateOne {
	cuo.mutation.ClearHost()
	return cuo
}

// Where appends a list predicates to the CarUpdate builder.
func (cuo *CarUpdateOne) Where(ps ...predicate.Car) *CarUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CarUpdateOne) Select(field string, fields ...string) *CarUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Car entity.
func (cuo *CarUpdateOne) Save(ctx context.Context) (*Car, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CarUpdateOne) SaveX(ctx context.Context) *Car {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CarUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CarUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CarUpdateOne) defaults() {
	if _, ok := cuo.mutation.CreateAt(); !ok {
		v := car.UpdateDefaultCreateAt()
		cuo.mutation.SetCreateAt(v)
	}
}

func (cuo *CarUpdateOne) sqlSave(ctx context.Context) (_node *Car, err error) {
	_spec := sqlgraph.NewUpdateSpec(car.Table, car.Columns, sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Car.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, car.FieldID)
		for _, f := range fields {
			if !car.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != car.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(car.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Price(); ok {
		_spec.SetField(car.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := cuo.mutation.AddedPrice(); ok {
		_spec.AddField(car.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := cuo.mutation.CreateAt(); ok {
		_spec.SetField(car.FieldCreateAt, field.TypeTime, value)
	}
	if cuo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.HostTable,
			Columns: []string{car.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.HostTable,
			Columns: []string{car.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Car{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{car.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
