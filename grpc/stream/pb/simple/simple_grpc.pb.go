// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: simple.proto

package simple

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SimpleService_Hello_FullMethodName        = "/simpleGRPC.SimpleService/Hello"
	SimpleService_HelloForever_FullMethodName = "/simpleGRPC.SimpleService/HelloForever"
)

// SimpleServiceClient is the client API for SimpleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleServiceClient interface {
	Hello(ctx context.Context, opts ...grpc.CallOption) (SimpleService_HelloClient, error)
	HelloForever(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (SimpleService_HelloForeverClient, error)
}

type simpleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleServiceClient(cc grpc.ClientConnInterface) SimpleServiceClient {
	return &simpleServiceClient{cc}
}

func (c *simpleServiceClient) Hello(ctx context.Context, opts ...grpc.CallOption) (SimpleService_HelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &SimpleService_ServiceDesc.Streams[0], SimpleService_Hello_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServiceHelloClient{stream}
	return x, nil
}

type SimpleService_HelloClient interface {
	Send(*HelloReq) error
	Recv() (*HelloResp, error)
	grpc.ClientStream
}

type simpleServiceHelloClient struct {
	grpc.ClientStream
}

func (x *simpleServiceHelloClient) Send(m *HelloReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleServiceHelloClient) Recv() (*HelloResp, error) {
	m := new(HelloResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleServiceClient) HelloForever(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (SimpleService_HelloForeverClient, error) {
	stream, err := c.cc.NewStream(ctx, &SimpleService_ServiceDesc.Streams[1], SimpleService_HelloForever_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleServiceHelloForeverClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimpleService_HelloForeverClient interface {
	Recv() (*HelloResp, error)
	grpc.ClientStream
}

type simpleServiceHelloForeverClient struct {
	grpc.ClientStream
}

func (x *simpleServiceHelloForeverClient) Recv() (*HelloResp, error) {
	m := new(HelloResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleServiceServer is the server API for SimpleService service.
// All implementations must embed UnimplementedSimpleServiceServer
// for forward compatibility
type SimpleServiceServer interface {
	Hello(SimpleService_HelloServer) error
	HelloForever(*HelloReq, SimpleService_HelloForeverServer) error
	mustEmbedUnimplementedSimpleServiceServer()
}

// UnimplementedSimpleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleServiceServer struct {
}

func (UnimplementedSimpleServiceServer) Hello(SimpleService_HelloServer) error {
	return status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedSimpleServiceServer) HelloForever(*HelloReq, SimpleService_HelloForeverServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloForever not implemented")
}
func (UnimplementedSimpleServiceServer) mustEmbedUnimplementedSimpleServiceServer() {}

// UnsafeSimpleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleServiceServer will
// result in compilation errors.
type UnsafeSimpleServiceServer interface {
	mustEmbedUnimplementedSimpleServiceServer()
}

func RegisterSimpleServiceServer(s grpc.ServiceRegistrar, srv SimpleServiceServer) {
	s.RegisterService(&SimpleService_ServiceDesc, srv)
}

func _SimpleService_Hello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleServiceServer).Hello(&simpleServiceHelloServer{stream})
}

type SimpleService_HelloServer interface {
	Send(*HelloResp) error
	Recv() (*HelloReq, error)
	grpc.ServerStream
}

type simpleServiceHelloServer struct {
	grpc.ServerStream
}

func (x *simpleServiceHelloServer) Send(m *HelloResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleServiceHelloServer) Recv() (*HelloReq, error) {
	m := new(HelloReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SimpleService_HelloForever_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimpleServiceServer).HelloForever(m, &simpleServiceHelloForeverServer{stream})
}

type SimpleService_HelloForeverServer interface {
	Send(*HelloResp) error
	grpc.ServerStream
}

type simpleServiceHelloForeverServer struct {
	grpc.ServerStream
}

func (x *simpleServiceHelloForeverServer) Send(m *HelloResp) error {
	return x.ServerStream.SendMsg(m)
}

// SimpleService_ServiceDesc is the grpc.ServiceDesc for SimpleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simpleGRPC.SimpleService",
	HandlerType: (*SimpleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hello",
			Handler:       _SimpleService_Hello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloForever",
			Handler:       _SimpleService_HelloForever_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "simple.proto",
}
